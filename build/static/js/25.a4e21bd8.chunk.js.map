{"version":3,"sources":["Main/Authentication/SignUp/SignUp.jsx"],"names":["SignUp","history","useHistory","useState","walletAddress","setWalletAddtress","referralID","setReferralID","uplineID","setUplineID","settingUplineID","setSettingUplineID","useBlockchain","contract","account","useEffect","urlParams","URLSearchParams","window","location","search","get","register","ethereum","balanceOf","balance","parseFloat","ethers","utils","formatEther","alert","upID","parseInt","getAccounts","length","registerAndActivate","BigNumber","from","toString","push","console","log","className","src","logoDark","alt","value","onChange","el","target","type","id","placeholder","Group","Check","custom","checked","label","onClick","to"],"mappings":"sQA0IeA,UA/HA,WACX,IAAMC,EAAUC,cAChB,EAA2CC,mBAAS,IAApD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAA8CN,oBAAS,GAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KAEA,EAA8BC,cAA9B,mBAAOC,EAAP,KAAiBC,EAAjB,KAGAC,qBAAU,WACN,IAAMC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QACtDb,EAAcS,EAAUK,IAAI,QAAU,MAEvC,CAACd,IAEJQ,qBAAU,WACHX,GACHC,EAAkBS,KACnB,CAACT,EAAmBD,EAAeU,IAEtC,IAAMQ,EAAQ,iDAAG,mGACRJ,OAAOK,SADC,iEAKSV,EAASW,UAAUV,GAL5B,UAKPW,EALO,SAMTC,WAAWC,IAAOC,MAAMC,YAAYJ,IAAY,KANvC,uBAOTP,OAAOY,MAAM,wBAPJ,iCAWTC,EAAO,IACPC,SAASxB,GAAY,IACrBuB,EAAOvB,GAbE,UAgBkBK,EAASoB,YAAY7B,GAhBvC,oBAiBQ8B,OAAS,GAjBjB,wBAkBThB,OAAOY,MAAM,gCAlBJ,sDAuBHjB,EAASsB,oBAAoBC,IAAUC,KAAK/B,EAAWgC,YAAaF,IAAUC,KAAKN,EAAKO,YAAalC,GAvBlG,QAwBTc,OAAOY,MAAM,iCACb7B,EAAQsC,KAAK,gBAzBJ,mDA2BTC,QAAQC,IAAR,MA3BS,2DAAH,qDA+Bd,OACI,qCACI,cAAC,IAAD,IACA,qBAAKC,UAAU,eAAf,SACI,qBAAKA,UAAU,eAAf,SACI,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,qCAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKC,IAAKC,IAAUC,IAAI,GAAGH,UAAU,mBACrC,oBAAIA,UAAU,eAAd,qBACA,qBAAKA,UAAU,kBAAf,SACI,uBACII,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OAAQ3C,EAAkB2C,EAAGC,OAAOH,QAC9CI,KAAK,OACLR,UAAU,eACVS,GAAG,UACHC,YAAY,qBAGpB,qBAAKV,UAAU,kBAAf,SACI,uBACII,MAAOxC,EACPyC,SAAU,SAACC,GAAD,OAAQzC,EAAcyC,EAAGC,OAAOH,QAC1CI,KAAK,SACLR,UAAU,eACVS,GAAG,aACHC,YAAY,kBAGpB,cAAC,IAAKC,MAAN,CAAYX,UAAU,YAAtB,SACI,cAAC,IAAKY,MAAN,CACIC,QAAM,EACNT,MAAOpC,EACPqC,SAAU,SAACC,GAAD,OAAQrC,EAAmBqC,EAAGC,OAAOO,UAC/CN,KAAK,WACLC,GAAG,qBACHM,MAAO,2BAId/C,EACG,qBAAKgC,UAAU,kBAAf,SACI,uBACII,MAAOtC,EACPuC,SAAU,SAACC,GAAD,OAAQvC,EAAYuC,EAAGC,OAAOH,QACxCI,KAAK,SACLR,UAAU,eACVS,GAAG,WACHC,YAAY,uBAIpB,GAGJ,wBAAQM,QAASpC,EAAUoB,UAAU,iCAArC,qBAGA,oBAAGA,UAAU,OAAb,qCAC6B,IACzB,cAAC,IAAD,CAASiB,GAAG,eAAejB,UAAU,UAArC","file":"static/js/25.a4e21bd8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\nimport './../../../assets/scss/style.scss';\nimport Breadcrumb from '../../../App/layout/AdminLayout/Breadcrumb';\nimport logoDark from '../../../assets/images/brand/gold.png';\n\nimport { BigNumber, ethers } from 'ethers';\nimport useBlockchain from '../../../hooks/useBlockchain';\n\nconst SignUp = () => {\n    const history = useHistory();\n    const [walletAddress, setWalletAddtress] = useState('');\n    const [referralID, setReferralID] = useState('');\n    const [uplineID, setUplineID] = useState('');\n    const [settingUplineID, setSettingUplineID] = useState(false);\n\n    const [contract, account, ] = useBlockchain();\n    \n\n    useEffect(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n        setReferralID(urlParams.get('ref') || '');\n        \n    }, [setReferralID]);\n\n    useEffect(() => {\n        if(walletAddress) return;\n        setWalletAddtress(account);\n    }, [setWalletAddtress, walletAddress, account])\n\n    const register = async () => {\n        if (!window.ethereum) {\n            return;\n        }\n\n        const balance = await contract.balanceOf(account);\n        if (parseFloat(ethers.utils.formatEther(balance)) < 2.5) {\n            window.alert('Insufficient balance');\n            return;\n        }\n\n        let upID = '0';\n        if (parseInt(uplineID) > 0) {\n            upID = uplineID;\n        }\n\n        const existingAccounts = await contract.getAccounts(walletAddress);\n        if (existingAccounts.length > 0) {\n            window.alert('Account exists, Please login');\n            return;\n        }\n\n        try {\n            await contract.registerAndActivate(BigNumber.from(referralID.toString()), BigNumber.from(upID.toString()), walletAddress);\n            window.alert('Account created, please login');\n            history.push('/auth/signin');\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <>\n            <Breadcrumb />\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-content\">\n                    <div className=\"card\">\n                        <div className=\"row align-items-center text-center\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <img src={logoDark} alt=\"\" className=\"img-fluid mb-4\" />\n                                    <h4 className=\"mb-3 f-w-400\">Sign up</h4>\n                                    <div className=\"form-group fill\">\n                                        <input\n                                            value={account}\n                                            onChange={(el) => setWalletAddtress(el.target.value)}\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            id=\"Account\"\n                                            placeholder=\"Wallet Address\"\n                                        />\n                                    </div>\n                                    <div className=\"form-group fill\">\n                                        <input\n                                            value={referralID}\n                                            onChange={(el) => setReferralID(el.target.value)}\n                                            type=\"number\"\n                                            className=\"form-control\"\n                                            id=\"ReferralID\"\n                                            placeholder=\"Referral ID\"\n                                        />\n                                    </div>\n                                    <Form.Group className=\"text-left\">\n                                        <Form.Check\n                                            custom\n                                            value={settingUplineID}\n                                            onChange={(el) => setSettingUplineID(el.target.checked)}\n                                            type=\"checkbox\"\n                                            id=\"supported-checkbox\"\n                                            label={'Set Matrix Parent ID'}\n                                        />\n                                    </Form.Group>\n\n                                    {settingUplineID ? (\n                                        <div className=\"form-group fill\">\n                                            <input\n                                                value={uplineID}\n                                                onChange={(el) => setUplineID(el.target.value)}\n                                                type=\"number\"\n                                                className=\"form-control\"\n                                                id=\"UplineID\"\n                                                placeholder=\"Matrix Parent ID\"\n                                            />\n                                        </div>\n                                    ) : (\n                                        ''\n                                    )}\n\n                                    <button onClick={register} className=\"btn btn-primary btn-block mb-4\">\n                                        Sign up\n                                    </button>\n                                    <p className=\"mb-2\">\n                                        Already have an account?{' '}\n                                        <NavLink to=\"/auth/signin\" className=\"f-w-400\">\n                                            Signin\n                                        </NavLink>\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\nexport default SignUp;\n"],"sourceRoot":""}