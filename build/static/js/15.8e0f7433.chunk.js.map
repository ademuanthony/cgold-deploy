{"version":3,"sources":["web3/Node.js","Main/Account/Matrix.js"],"names":["MatrixNode","id","level","left","right","load","blockLevel","contract","getDirectLegs","basePartLevel","legs","parseInt","leftLevel","rightLevel","console","log","loaded","Matrix","getAccount","useLocalStorage","useBlockchain","active","useState","rootNode","setRootNode","leftNode","setLeftNode","rightNode","setRightNode","accountID","setAccountID","setLevel","user","setUser","to","useEffect","fn","params","URLSearchParams","window","location","search","get","getUser","BigNumber","from","premiumLevel","rNode","className","href"],"mappings":"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","file":"static/js/15.8e0f7433.chunk.js","sourcesContent":["export default class MatrixNode {\n    id = 0;\n    level = 0;\n\n    left = {};\n    right = {};\n\n    load = async (id, level, blockLevel, contract) => {\n        if (id === 0) return;\n        this.id = id;\n        if (blockLevel <= 0) return;\n\n        let legs\n        try {\n            legs = await contract.getDirectLegs(id, basePartLevel(level));\n            this.left = new MatrixNode();\n            this.left.id = parseInt(legs.left)\n            this.left.level = parseInt(legs.leftLevel)\n\n            this.right = new MatrixNode();\n            this.right.id = parseInt(legs.right)\n            this.right.level = parseInt(legs.rightLevel)\n        } catch (error) {\n            console.log(error)\n            console.log('call', blockLevel, id, basePartLevel(level))\n            return\n        }\n\n        if (parseInt(legs.left) > 0) {\n            this.left.load(parseInt(legs.left), level, blockLevel - 1, contract);\n        }\n\n        if (parseInt(legs.right) > 0) {\n            this.right.load(parseInt(legs.right), level, blockLevel - 1, contract);\n        }\n        this.loaded = true;\n    }\n}\n\nconst basePartLevel = (level) => {\n    if (level < 3) {\n        return 1;\n    }\n    if (level < 6) {\n        return 3;\n    }\n    if (level < 9) {\n        return 6;\n    }\n    if (level < 12) {\n        return 9;\n    }\n    if (level < 15) {\n        return 12;\n    }\n    return 15;\n}\n","import { BigNumber } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport useBlockchain from '../../hooks/useBlockchain';\nimport useLocalStorage from '../../hooks/useLocalStorage';\nimport MatrixNode from '../../web3/Node.js';\n\nimport './../../../src/assets/matrix.css';\n\nconst Matrix = () => {\n    const { getAccount } = useLocalStorage('');\n    const [contract, , , active] = useBlockchain('');\n\n    const [rootNode, setRootNode] = useState(new MatrixNode())\n    const [leftNode, setLeftNode] = useState(new MatrixNode())\n    const [rightNode, setRightNode] = useState(new MatrixNode())\n\n    const [accountID, setAccountID] = useState();\n    const [level, setLevel] = useState();\n\n    const [user, setUser] = useState({});\n\n\n    useEffect(() => {\n        if (!active) return;\n        const fn = async () => {\n            const params = new URLSearchParams(window.location.search);\n            const id = params.get('id') || getAccount();\n            setAccountID(id);\n            const user = await contract.getUser(BigNumber.from(id));\n            setUser(user);\n\n            const level = params.get('level') || parseInt(user.premiumLevel);\n            setLevel(params.get('level') || parseInt(user.premiumLevel));\n\n            // block 1\n            const rNode = new MatrixNode()\n            rNode.level = parseInt(user.premiumLevel);\n            await rNode.load(id, level, 1, contract)\n            setRootNode(rNode)\n\n            const left = new MatrixNode()\n            await left.load(rNode.left.id, level, 1, contract)\n            setLeftNode(left)\n            \n            const right = new MatrixNode()\n            await right.load(rNode.right.id, level, 1, contract)\n            setRightNode(right)\n        };\n        fn();\n    }, [contract, getAccount, active]);\n\n    function to(id, level) {\n        return `?id=${id}&level=${level}`;\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <div className=\"card\">\n                            <div className=\"card-header\">\n                                <h5>\n                                    Matrix\n                                    {level === '1' ? (\n                                        <small>\n                                            <a href={`?id=${accountID}&level=${parseInt(user.premiumLevel)}`}> Current Level</a>\n                                        </small>\n                                    ) : (\n                                        <small>\n                                            <a href={`?id=${accountID}&level=1`}> Base Matrix</a>\n                                        </small>\n                                    )}\n                                </h5>\n                            </div>\n                            {rootNode.loaded ?\n                            <div className=\"card-body table-border-style\" data-controller=\"matrix\">\n                                <div className=\"container\">\n                                    <h1 className=\"level-1 rectangle\" data-id=\"{{.Matrix.ID}}\" data-target=\"matrix.account\">\n                                    <a href={to(rootNode.id, rootNode.level)} className=\"text-white\">\n                                                {rootNode.id}\n                                                <span>({parseInt(user.premiumLevel)})</span>{' '}\n                                            </a>\n                                    </h1>\n                                    <ol className=\"level-2-wrapper\">\n                                        <li>\n                                            <h2 className=\"level-2 rectangle\" data-target=\"matrix.account\" data-id=\"{{.Matrix.Left.ID}}\">\n                                            {rootNode.left.id === 0 ? (\n                                                            <span className=\"text-white\">Empty</span>\n                                                        ) :\n                                                <a href={to(rootNode.left.id, level)} className=\"text-white\">\n                                                    {rootNode.left.id}\n                                                    <span>({rootNode.left.level})</span>\n                                                </a>\n                                            }\n                                            </h2>\n                                            <ol className=\"level-3-wrapper\">\n                                                <li>\n                                                    <h2\n                                                        className=\"level-3 rectangle\"\n                                                        data-target=\"matrix.account\"\n                                                        data-id=\"{{.Matrix.Left.Left.ID}}\"\n                                                    >\n                                                    {leftNode.left.id === 0 ? (\n                                                            <span className=\"text-white\">Empty</span>\n                                                        ) :\n                                                        <a href={to(leftNode.left.id, level)} className=\"text-white\">\n                                                            {leftNode.left.id}\n                                                            <span>({leftNode.left.level})</span>\n                                                        </a>\n                                                    }\n                                                    </h2>\n                                                </li>\n                                                <li>\n                                                    <h2\n                                                        className=\"level-3 rectangle\"\n                                                        data-target=\"matrix.account\"\n                                                        data-id=\"{{.Matrix.Left.Right.ID}}\"\n                                                    >\n                                                    {leftNode.right.id === 0 ? (\n                                                            <span className=\"text-white\">Empty</span>\n                                                        ) :\n                                                        <a href={to(leftNode.right.id, level)} className=\"text-white\">\n                                                            {leftNode.right.id}\n                                                            <span>({leftNode.right.level})</span>\n                                                        </a>\n                                                    }\n                                                    </h2>\n                                                </li>\n                                            </ol>\n                                        </li>\n                                        <li>\n                                            <h2 className=\"level-2 rectangle\" data-target=\"matrix.account\" data-id=\"{{.Matrix.Right.ID}}\">\n                                            {rootNode.right.id === 0 ? (\n                                                            <span className=\"text-white\">Empty</span>\n                                                        ) :\n                                                <a href={to(rootNode.right.id, level)} className=\"text-white\">\n                                                    {rootNode.right.id}\n                                                    <span>({rootNode.right.level})</span>\n                                                </a>\n                                            }\n                                            </h2>\n                                            <ol className=\"level-3-wrapper\">\n                                                <li>\n                                                    <h3\n                                                        className=\"level-3 rectangle\"\n                                                        data-target=\"matrix.account\"\n                                                        data-id=\"{{.Matrix.Right.Left.ID}}\"\n                                                    >\n                                                    {rightNode.left.id === 0 ? (\n                                                            <span className=\"text-white\">Empty</span>\n                                                        ) :\n                                                        <a href={to(rightNode.left.id, level)} className=\"text-white\">\n                                                            {rightNode.left.id}\n                                                            <span>({rightNode.left.level})</span>\n                                                        </a>\n                                                    }\n                                                    </h3>\n                                                </li>\n                                                <li>\n                                                    <h3\n                                                        className=\"level-3 rectangle\"\n                                                        data-target=\"matrix.account\"\n                                                        data-id=\"{{.Matrix.Right.Right.ID}}\"\n                                                    >\n                                                        {rightNode.right.id === 0 ? (\n                                                            <span className=\"text-white\">Empty</span>\n                                                        ) : (\n                                                            <a href={to(rightNode.right.id, level)} className=\"text-white\">\n                                                                {rightNode.right.id}\n                                                                <span>({rightNode.right.level})</span>\n                                                            </a>\n                                                        )}\n                                                    </h3>\n                                                </li>\n                                            </ol>\n                                        </li>\n                                    </ol>\n                                </div>\n                            </div> : ''  }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Matrix;\n"],"sourceRoot":""}