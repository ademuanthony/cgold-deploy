{"version":3,"sources":["Main/Account/Referrals.js"],"names":["Referrals","getAccount","useLocalStorage","useBlockchain","contract","active","useState","referrals","setReferrals","useEffect","accountID","fn","res","getReferrals","referralIDs","length","i","getUser","user","push","id","parseInt","classicLevel","premiumLevel","upgradeDownline","upgradeToPremium","Math","random","window","alert","activateDownline","activate","md","className","map","directReferral","href","onClick","classicCheckpoint"],"mappings":"8NAsFeA,UAjFG,WACd,IAAQC,EAAeC,cAAfD,WACR,EAA6BE,cAA7B,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAGAC,qBAAU,WACN,GAAKJ,EAAL,CACA,IAAMK,EAAYT,IACZU,EAAE,iDAAG,2GACDC,EAAM,GADL,SAEmBR,EAASS,aAAaH,GAFzC,UAImB,KAFpBI,EAFC,QAIQC,OAJR,iDAKCC,EAAI,EALL,YAKQA,EAAIF,EAAYC,QALxB,kCAMgBX,EAASa,QAAQH,EAAYE,IAN7C,QAMGE,EANH,OAOHN,EAAIO,KAAK,CAACC,GAAIC,SAASP,EAAYE,IAAKM,aAAcD,SAASH,EAAKI,cAAeC,aAAcF,SAASH,EAAKK,gBAP5G,QAKgCP,IALhC,uBASPR,EAAaI,GATN,4CAAH,qDAWRD,OACD,CAACV,EAAYG,EAAUC,IAE1B,IAAMmB,EAAe,iDAAG,WAAOJ,GAAP,2FACdhB,EAASqB,iBAAiBL,EAAIM,KAAKC,UADrB,OAEpBC,OAAOC,MAAM,QAFO,2CAAH,sDAKfC,EAAgB,iDAAG,WAAOV,GAAP,2FACfhB,EAAS2B,SAASX,GADH,OAErBQ,OAAOC,MAAM,QAFQ,2CAAH,sDAKtB,OACI,mCACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKG,GAAI,GAAT,SACI,sBAAKC,UAAU,OAAf,UACI,qBAAKA,UAAU,cAAf,SACI,gDAEJ,qBAAKA,UAAU,+BAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,wBAAOA,UAAU,QAAjB,UACI,gCACI,+BACI,oCACA,+CACA,+CACA,6CAGR,gCACK1B,EAAU2B,KAAI,SAACC,EAAgBnB,GAC5B,OACI,+BACI,6BAAKmB,EAAef,KACpB,6BAAKe,EAAeb,eACpB,6BAAKa,EAAeZ,eACpB,+BACKY,EAAeZ,aAAe,EAC/B,mBAAGa,KAAI,qBAAgBD,EAAef,IAAtC,kBAAsD,GACpB,IAAhCe,EAAeZ,aACjB,wBAAQc,QAAS,kBAAMb,EAAgBW,EAAef,KAAtD,gCAAwF,GAClD,IAArCe,EAAeG,kBAChB,wBAAQD,QAAS,kBAAMP,EAAiBK,EAAef,KAAvD,sBAA+E,QAV9EJ","file":"static/js/22.04b737e0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport useBlockchain from '../../hooks/useBlockchain';\nimport useLocalStorage from '../../hooks/useLocalStorage';\n\nconst Referrals = () => {\n    const { getAccount } = useLocalStorage();\n    const [contract,,, active] = useBlockchain();\n    const [referrals, setReferrals] = useState([])\n\n\n    useEffect(() => {\n        if (!active) return;\n        const accountID = getAccount();\n        const fn = async () => {\n            const res = []\n            const referralIDs = await contract.getReferrals(accountID)\n\n            if(referralIDs.length === 0) return\n            for(let i = 0; i < referralIDs.length; i++) {\n                const user = await contract.getUser(referralIDs[i])\n                res.push({id: parseInt(referralIDs[i]), classicLevel: parseInt(user.classicLevel), premiumLevel: parseInt(user.premiumLevel)})\n            }\n            setReferrals(res)\n        };\n        fn();\n    }, [getAccount, contract, active]);\n\n    const upgradeDownline = async (id) => {\n        await contract.upgradeToPremium(id, Math.random())\n        window.alert('Done')\n    }\n\n    const activateDownline = async (id) => {\n        await contract.activate(id)\n        window.alert('Done')\n    }\n\n    return (\n        <>\n            <Row>\n                <Col md={12}>\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h5>My Referrals</h5>\n                        </div>\n                        <div className=\"card-body table-border-style\">\n                            <div className=\"table-responsive\">\n                                <table className=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Classic Level</th>\n                                            <th>Premium Level</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {referrals.map((directReferral, i) => {\n                                            return (\n                                                <tr key={i}>\n                                                    <td>{directReferral.id}</td>\n                                                    <td>{directReferral.classicLevel}</td>\n                                                    <td>{directReferral.premiumLevel}</td>\n                                                    <td>\n                                                        {directReferral.premiumLevel > 0 ? \n                                                        <a href={`/matrix?id=${directReferral.id}`}>View</a> :''}\n                                                         {directReferral.premiumLevel === 0 ? \n                                                        <button onClick={() => upgradeDownline(directReferral.id)}>Upgrade to Premium</button> :'' }\n                                                        {directReferral.classicCheckpoint === 0 ? \n                                                        <button onClick={() => activateDownline(directReferral.id)}>Activate</button> :'' }\n                                                    </td>\n                                                </tr>\n                                            );\n                                        })}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Referrals;\n"],"sourceRoot":""}