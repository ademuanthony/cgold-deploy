{"version":3,"sources":["hooks/useLocalStorage.js","Main/Authentication/SignIn/SignIn.jsx"],"names":["accountKey","setAccount","value","window","localStorage","setItem","getAccount","getItem","clearAccount","useLocalStorage","SignIn","useState","accountID","setAccountID","useBlockchain","contract","walletAddress","active","history","useHistory","useEffect","fn","getAccounts","accountIDs","length","min","i","parseInt","login","lastID","maxID","alert","push","className","src","logoDark","alt","onChange","e","target","type","id","placeholder","onClick","to"],"mappings":"yIACA,IAAMA,EAAa,cAEbC,EAAa,SAACC,GAClBC,OAAOC,aAAaC,QAAQL,EAAYE,IAGpCI,EAAa,WACjB,OAAOH,OAAOC,aAAaG,QAAQP,IAG/BQ,EAAe,WACnBL,OAAOC,aAAaC,QAAQL,EAAY,OAO3BS,IAJS,WACtB,MAAO,CAACR,aAAYK,aAAYE,kB,8ICsEnBE,UA/EA,WACX,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CC,cAA1C,mBAAOC,EAAP,KAAiBC,EAAjB,KAAgCC,EAAhC,KACA,EAAqCR,cAA7BR,EAAR,EAAQA,WAAYO,EAApB,EAAoBA,aACdU,EAAUC,cAEhBC,qBAAU,WACNZ,MACD,CAACA,IAEJY,qBAAU,WACN,GAAKH,EAAL,CACA,IAAMI,EAAE,iDAAG,kHACkBN,EAASO,YAAYN,GADvC,UAEmB,KADpBO,EADC,QAEQC,OAFR,iDAMP,IADIC,EAAMF,EAAW,GACZG,EAAI,EAAGA,EAAIH,EAAWC,OAAQE,IAC/BH,EAAWG,GAAKD,IAChBA,EAAMF,EAAWG,IAGzBb,EAAac,SAASF,IAXf,2CAAH,qDAaRJ,OACD,CAACR,EAAcE,EAAUC,EAAeC,IAE3C,IAAMW,EAAK,iDAAG,0GACID,SADJ,SACmBZ,EAASc,SAD5B,sBACJC,GADI,cAEJlB,EAAY,GAAKA,GAAakB,EAF1B,uBAGN3B,OAAO4B,MAAM,aAAeD,GAHtB,0BAMV7B,EAAWW,GACXM,EAAQc,KAAK,kBAPH,4CAAH,qDAUX,OACI,qCACI,cAAC,IAAD,IACA,qBAAKC,UAAU,eAAf,SACI,qBAAKA,UAAU,eAAf,SACI,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,qCAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKC,IAAKC,IAAUC,IAAI,GAAGH,UAAU,mBACrC,oBAAIA,UAAU,eAAd,oBACA,qBAAKA,UAAU,kBAAf,SACI,uBACI/B,MAAOU,EACPyB,SAAU,SAACC,GAAD,OAAOzB,EAAayB,EAAEC,OAAOrC,QACvCsC,KAAK,SACLP,UAAU,eACVQ,GAAG,KACHC,YAAY,iBAIpB,wBAAQT,UAAU,iCAAiCU,QAASf,EAA5D,oBAIA,oBAAGK,UAAU,kBAAb,wCAC2B,IACvB,cAAC,IAAD,CAASW,GAAG,eAAeX,UAAU,UAArC","file":"static/js/18.0a341a0f.chunk.js","sourcesContent":["\nconst accountKey = 'account_key'\n\nconst setAccount = (value) => {\n  window.localStorage.setItem(accountKey, value);\n}\n\nconst getAccount = () => {\n  return window.localStorage.getItem(accountKey);\n}\n\nconst clearAccount = () => {\n  window.localStorage.setItem(accountKey, null);\n}\n\nconst useLocalStorage = () => {\n  return {setAccount, getAccount, clearAccount};\n}\n\nexport default useLocalStorage\n","import React, { useEffect, useState } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport './../../../assets/scss/style.scss';\nimport Breadcrumb from '../../../App/layout/AdminLayout/Breadcrumb';\nimport logoDark from '../../../assets/images/brand/gold.png';\nimport useBlockchain from '../../../hooks/useBlockchain';\nimport useLocalStorage from '../../../hooks/useLocalStorage';\nconst SignIn = () => {\n    const [accountID, setAccountID] = useState('');\n    const [contract, walletAddress, active] = useBlockchain();\n    const { setAccount, clearAccount } = useLocalStorage();\n    const history = useHistory();\n\n    useEffect(() => {\n        clearAccount()\n    }, [clearAccount])\n\n    useEffect(() => {\n        if (!active) return\n        const fn = async () => {\n            const accountIDs = await contract.getAccounts(walletAddress);\n            if (accountIDs.length === 0) {\n                return\n            }\n            let min = accountIDs[0]\n            for (let i = 0; i < accountIDs.length; i++) {\n                if (accountIDs[i] < min) {\n                    min = accountIDs[i]\n                }\n            }\n            setAccountID(parseInt(min));\n        };\n        fn();\n    }, [setAccountID, contract, walletAddress, active]);\n\n    const login = async () => {\n        const maxID = parseInt(await contract.lastID());\n        if (!(accountID > 0 && accountID <= maxID)) {\n            window.alert('Invalid ID' + maxID);\n            return;\n        }\n        setAccount(accountID);\n        history.push('/app/dashboard');\n    };\n\n    return (\n        <>\n            <Breadcrumb />\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-content\">\n                    <div className=\"card\">\n                        <div className=\"row align-items-center text-center\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <img src={logoDark} alt=\"\" className=\"img-fluid mb-4\" />\n                                    <h4 className=\"mb-3 f-w-400\">Signin</h4>\n                                    <div className=\"form-group fill\">\n                                        <input\n                                            value={accountID}\n                                            onChange={(e) => setAccountID(e.target.value)}\n                                            type=\"number\"\n                                            className=\"form-control\"\n                                            id=\"id\"\n                                            placeholder=\"Account ID\"\n                                        />\n                                    </div>\n\n                                    <button className=\"btn btn-block btn-primary mb-4\" onClick={login}>\n                                        Signin\n                                    </button>\n\n                                    <p className=\"mb-0 text-muted\">\n                                        Donâ€™t have an account?{' '}\n                                        <NavLink to=\"/auth/signup\" className=\"f-w-400\">\n                                            Signup\n                                        </NavLink>\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\nexport default SignIn;\n"],"sourceRoot":""}